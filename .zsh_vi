# Author: Oleg Selivanov <oleg.a.selivanov@gmail.com>
# Zsh vi-mode done right.

# Make terminal respond faster on esc key. 
# But in general it's not enough. See the \e bindings below. 
KEYTIMEOUT=1

bindkey -v 

# Initialization of colors shortcuts.
autoload -U colors
colors

setopt promptsubst

vim_ins_mode="-i- "
vim_cmd_mode="-n- "
vim_mode=$vim_ins_mode
PROMPT=$'${vim_mode}âžœ '
FIRST_LINE=1

# Setup C-p and C-n to browse history in insert mode.
bindkey -M viins '^p' up-history 
bindkey -M viins '^n' down-history 

# Setup incremental backward search.
bindkey -M vicmd '/' history-incremental-search-backward
bindkey -M vicmd "\e/" history-incremental-search-backward
bindkey -M isearch '^p' history-incremental-search-backward
bindkey -M isearch '^n' history-incremental-search-forward 

# Hack to make hjkl become more responsible (after Esc pressed in command mode).
bindkey -M vicmd "\eh" vi-backward-char
bindkey -M vicmd "\el" vi-forward-char
bindkey -M viins "\ej" down-history 
bindkey -M viins "\ek" up-history 
bindkey -M vicmd "\e0" vi-beginning-of-line 
bindkey -M vicmd "\e$" vi-end-of-line 

# Don't use vi mode in backward delete word/char
# because it cannot delete characters before the position entering insert mode.
zle -A .backward-kill-word vi-backward-kill-word
zle -A .backward-delete-char vi-backward-delete-char

# Just delete char in command mode on backspace.
bindkey -M vicmd "^?" vi-backward-delete-char

# Use hjkl in completion menu.
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char

# Disable moving one char back after switching to insert mode.
vi-esc-fix() {
  zle vi-cmd-mode
  zle forward-char
}
zle -N vi-esc-fix
bindkey -r "\e" 
bindkey -M viins "\e" vi-esc-fix

function zle-line-init {
  FIRST_LINE=0
}
function zle-line-finish {
  vim_mode=$vim_ins_mode
  zle reset-prompt
}
function zle-keymap-select {
  vim_mode="${${KEYMAP/vicmd/${vim_cmd_mode}}/(main|viins)/${vim_ins_mode}}"
  zle reset-prompt
}
zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

# Show git branch and current python virtualenv in prompt. 
export VIRTUAL_ENV_DISABLE_PROMPT=1
# We're using precmd to avoid a bug in zsh. Due this bug zsh redraw the prompt 
# wrong when zle reset-prompt in called in insert mode.
precmd () {
  [ -f "$(pwd)/.virtualenv" ] && workon $(cat "$(pwd)/.virtualenv")
  local GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
  [[ ! -z $GIT_BRANCH ]] && \
      local PROMPT_GIT="(git: %{$fg[blue]%}$GIT_BRANCH%{${reset_color}%}) "
  [[ ! -z $VIRTUAL_ENV ]] && \
      local PROMPT_VENV="(venv: %{$fg[blue]%}${VIRTUAL_ENV#$WORKON_HOME/}%{${reset_color}%}) "
  if [ $FIRST_LINE -eq "0" ]; then
    echo
    echo
  fi
  print -rP "%{$fg[blue]%}%n@%m %{$fg[yellow]%}%~ %{${reset_color}%}$PROMPT_GIT$PROMPT_VENV"
}

# Reset prompt when C-c was pressed.
TRAPINT () {
  vim_mode="${${KEYMAP/vicmd/${vim_cmd_mode}}/(main|viins)/${vim_ins_mode}}"
  zle && zle reset-prompt && zle vi-insert
  return 1
}

# Clear screen w/o loosing the data.
clear-screen() { 
  vim_mode=$vim_ins_mode
  zle vi-insert
  zle -I
  repeat $((LINES+1)) echo
  clear
  FIRST_LINE=1
  precmd 
  FIRST_LINE=0
}
zle -N clear-screen

autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line
